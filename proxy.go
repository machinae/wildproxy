package main

import (
	"fmt"
	"net"
	"net/http"
	"net/http/httputil"
	"regexp"
	"strings"

	log "github.com/sirupsen/logrus"
)

var (
	proxy *httputil.ReverseProxy

	srv *http.Server
)

func StartServer() {
	proxy = newProxy()

	srv = &http.Server{
		Addr:         httpHost,
		Handler:      filterRequest(proxy),
		ReadTimeout:  clientTimeout,
		WriteTimeout: clientTimeout,
	}
	log.Fatal(srv.ListenAndServe())
}

func newProxy() *httputil.ReverseProxy {
	var tr http.RoundTripper
	dialer := &net.Dialer{
		Timeout:   upstreamTimeout,
		KeepAlive: upstreamTimeout,
	}
	tr = &http.Transport{
		DialContext: dialer.DialContext,
	}

	if log.IsLevelEnabled(log.DebugLevel) {
		tr = &LoggingTransport{tr}
	}

	if anonMode {
		tr = &AnonTransport{tr}
	}

	tr = &SafeTransport{tr}

	return &httputil.ReverseProxy{
		Director:       proxyRequest,
		ModifyResponse: proxyResponse,
		Transport:      tr,
	}
}

// Middleware to filter incoming requests before they are sent to the proxy
func filterRequest(h http.Handler) http.Handler {
	proxyHostRegexp, _ := regexp.Compile("^https?://" + httpHost + "/")
	absoluteRequestRegexp, _ := regexp.Compile("^/(https?|www)")

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// simple hardcoded routing
		requestURL := r.URL.EscapedPath()

		switch requestURL {
		case "/":
			fmt.Fprintf(w, "Wildproxy %s\nhttps://github.com/machinae/wildproxy\n", version)
		case "/health":
			w.WriteHeader(200)
		case "/favicon.ico", "/apple-touch-icon-precomposed.png", "/apple-touch-icon.png":
			// favicon requests auto generated by browser
			w.WriteHeader(204)
		default:
			if absoluteRequestRegexp.MatchString(requestURL) {
				// request is valid, proxy it
				h.ServeHTTP(w, r)
			} else {
				// handle relative requests
				refererURL := strings.TrimRight(r.Header.Get("Referer"), "/")
				originURL := proxyHostRegexp.ReplaceAllString(refererURL, "")
				redirectURL := originURL + requestURL

				http.Redirect(w, r, redirectURL, http.StatusSeeOther)
			}
		}
	})
}
