package main

import (
	"fmt"
	"net"
	"net/http"
	"net/http/httputil"

	log "github.com/sirupsen/logrus"
)

var (
	proxy *httputil.ReverseProxy

	srv *http.Server
)

func StartServer() {
	proxy = newProxy()

	srv = &http.Server{
		Addr:         httpHost,
		Handler:      filterRequest(proxy),
		ReadTimeout:  clientTimeout,
		WriteTimeout: clientTimeout,
	}
	log.Fatal(srv.ListenAndServe())
}

func newProxy() *httputil.ReverseProxy {
	var tr http.RoundTripper
	dialer := &net.Dialer{
		Timeout:   upstreamTimeout,
		KeepAlive: upstreamTimeout,
	}
	tr = &http.Transport{
		DialContext: dialer.DialContext,
	}

	if log.IsLevelEnabled(log.DebugLevel) {
		tr = &LoggingTransport{tr}
	}

	if anonMode {
		tr = &AnonTransport{tr}
	}

	tr = &SafeTransport{tr}

	return &httputil.ReverseProxy{
		Director:       proxyRequest,
		ModifyResponse: proxyResponse,
		Transport:      tr,
	}
}

// Middleware to filter incoming requests before they are sent to the proxy
func filterRequest(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		// simple hardcoded routing
		switch r.URL.EscapedPath() {
		case "/":
			fmt.Fprintf(w, "Wildproxy %s\nhttps://github.com/machinae/wildproxy\n", version)
		case "/health":
			w.WriteHeader(200)
		case "/favicon.ico", "/apple-touch-icon-precomposed.png", "/apple-touch-icon.png":
			// favicon requests auto generated by browser
			w.WriteHeader(204)
		case "/build/wildproxy.min.js":
			// injected javascript
			w.Header().Set("Content-Type", "application/javascript")
			http.ServeFile(w, r, scriptFile)
		default:
			// request is valid, proxy it
			h.ServeHTTP(w, r)
		}
	})
}
